import cv2
import socket
import json
import random  # Para simular os dados de sensores (pressão, temperatura, umidade)

# Configurações do servidor (Raspberry Pi)
LISTEN_IP = '0.0.0.0'
TRIGGER_PORT = 3011
NOTEBOOK_IP = '192.168.137.1'  # IP do notebook
NOTEBOOK_PORT = 8080

# URL do stream de vídeo do DroidCam
CAMERA_URL = 'http://192.168.137.138:4747/video'

# Função para simular a leitura de sensores
def get_sensor_data():
    data = {
        'temperatura': round(random.uniform(20.0, 35.0), 2),
        'pressao': round(random.uniform(990.0, 1020.0), 2),
        'umidade': round(random.uniform(40.0, 90.0), 2),
        'latitude': -23.5505,
        'longitude': -46.6333
    }
    return data

def wait_for_trigger_and_send_data():
    # Configurar o servidor para receber o comando de captura de imagem e dados
    trigger_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    trigger_socket.bind((LISTEN_IP, TRIGGER_PORT))
    trigger_socket.listen(1)

    print("Aguardando comando do notebook para capturar e enviar dados...")

    while True:
        conn, addr = trigger_socket.accept()
        print(f'Comando recebido de {addr}, coletando dados...')

        try:
            # Receber o comando do notebook
            received_data = conn.recv(1024).decode('utf-8')

            if not received_data:
                raise ValueError("Nenhum dado foi recebido")

            # Tentar carregar o JSON
            try:
                selection = json.loads(received_data)
            except json.JSONDecodeError:
                print("Erro ao decodificar JSON. Dados recebidos:", received_data)
                conn.close()
                continue

            print(f"Notebook solicitou os seguintes dados: {selection}")

            # Inicializar pacote de dados
            data_package = {'sensors': {}}

            # Se o notebook solicitou imagem
            if selection.get("image", False):
                cap = cv2.VideoCapture(CAMERA_URL)
                if not cap.isOpened():
                    print("Erro ao acessar a câmera do celular.")
                    conn.close()
                    continue

                ret, frame = cap.read()
                if not ret:
                    print("Falha ao capturar frame do vídeo.")
                    conn.close()
                    cap.release()
                    continue

                image_path = 'captured_image.jpg'
                cv2.imwrite(image_path, frame)
                cap.release()

                with open(image_path, 'rb') as image_file:
                    image_data = image_file.read()

                data_package['image'] = image_data.hex()

            # Enviar apenas os dados de sensores solicitados
            sensor_data = get_sensor_data()
            if selection.get("temperatura", False):
                data_package['sensors']['temperatura'] = sensor_data['temperatura']
            if selection.get("pressao", False):
                data_package['sensors']['pressao'] = sensor_data['pressao']
            if selection.get("umidade", False):
                data_package['sensors']['umidade'] = sensor_data['umidade']
            if selection.get("latitude", False):
                data_package['sensors']['latitude'] = sensor_data['latitude']
            if selection.get("longitude", False):
                data_package['sensors']['longitude'] = sensor_data['longitude']

            # Enviar os dados solicitados ao notebook
            try:
                client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                client_socket.connect((NOTEBOOK_IP, NOTEBOOK_PORT))

                json_data = json.dumps(data_package)
                client_socket.sendall(json_data.encode('utf-8'))

                client_socket.close()
                print("Dados enviados com sucesso!")

            except Exception as e:
                print(f"Erro ao enviar os dados: {e}")

        except ValueError as e:
            print(f"Erro: {e}")
        finally:
            conn.close()

if __name__ == '__main__':
    wait_for_trigger_and_send_data()
